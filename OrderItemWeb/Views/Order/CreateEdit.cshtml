@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model VMSoOrder
@{
    long numTotal = 0;
    long totalOrderItem = ViewBag.TotalItem;
    double totalOrderAmount = ViewBag.TotalAmount;
}

<div class="text-center" style="background-color: gray;">
    <h3 class="mt-2">Sales Order Information <i class="fas fa-level-down-alt"></i></h3>
</div>

<div class="mt-1">
    <form id="frmOrder">
        <div class="row m-5">
            <div class="col-5">
                <div class="input-group mb-3">
                    <label class="input-group-text col-3 text-light">Sales Order Number</label>
                    <input id="keyword" type="text" class="form-control col-9" name="OrderNo" value="@ViewBag.OrderNo" required />
                </div>
                @* <label for="Stock" generated="true" class="error"></label> *@
                <p id="orderNoErr" style="color: red"></p>
            </div>
            <div class="col-2">
            </div>
            <div class="col-5">
                <div class="input-group mb-3">
                    <label class="input-group-text col-3 text-light">Customer</label>
                    @* <input id="customer" type="text" class="form-control col-9" name="Customer" /> *@
                    <select class="form-select" name="ComCustomerId">
                        @if (ViewBag.Customers != null && ViewBag.Customers.Count > 0)
                        {
                            foreach (VMComCustomer customer in ViewBag.Customers)
                            {
                                if (customer.ComCustomerId == ViewBag.CustomerId)
                                {
                                    <option value="@customer.ComCustomerId" selected>@customer.CustomerName</option>
                                }
                                else
                                {
                                    <option value="@customer.ComCustomerId">@customer.CustomerName</option>
                                }
                            }
                        }
                    </select>
                </div>
            </div>
        </div>
        <div class="row m-5">
            <div class="col-5 flatpickr">
                <div class="input-group mb-3">
                    <label class="input-group-text col-3 text-light">Order Date</label>
                    <input id="orderDate" type="text" class="form-control col-9" name="OrderDate" value="@ViewBag.OrderDate" required />
                    <div class="input-group-append">
                        <button id="btnClearDate" class="btn btn-secondary">Clear</button>
                    </div>
                </div>
                <p id="orderDateErr" style="color: red"></p>
            </div>
            <div class="col-2">
            </div>
            <div class="col-5">
                <div class="input-group mb-3">
                    <label class="input-group-text col-3 text-light">Address</label>
                    <textarea class="form-control" id="address" rows="3" name="Address">@ViewBag.Address</textarea>
                </div>
                <p id="orderAddressErr" style="color: red"></p>
            </div>
        </div>
        <input type="hidden" name="SoOrderId" value="@ViewBag.OrderId" />
        <input id="itemCarry" type="hidden" name="Items" />
    </form>   
</div>

<div class="align-middle text-center" style="background-color: gray;">
    <h3 class="mt-2">Detail Item Information <i class="fas fa-level-down-alt"></i></h3>
</div>

<div class="row mt-4">
    <div class="col-3">
        <button id="btnAddItem" type="button" class="btn btn-light-primary mb-4 text-light"><span>Add New Data</span></button>
    </div>
</div>

<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="col-2">No</th>
                <th class="col-2">Action</th>
                <th class="col-2">Item Name</th>
                <th class="col-2">Qty</th>
                <th class="col-2">Price</th>
                <th class="col-2">Total</th>
            </tr>
        </thead>
        <tbody id="itemData">
        @if (Model.Items != null && Model.Items.Count > 0)
        {
            long num = Model.Items[0].SoItemId - (Model.Items[0].SoItemId - 1);
            int totalItem = 0;
            double totalAmount = 0;

            foreach(VMSoItem item in Model.Items)
            {
                <tr>
                    <td>@num</td>
                    <td>
                        <div class="btn-group" role="group">
                            <button data-id="@item.SoItemId" class="btn btn-outline-info" title="Edit...">
                                <i class="fas fa-edit"></i>
                            </button>
                            &nbsp;
                            <button data-id="@item.SoItemId" class="btn btn-outline-danger" title="Delete...">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    </td>
                    <td class="name">@item.ItemName</td>
                    <td class="qty">@item.Quantity</td>
                    <td class="price">@(String.Format("{0:N0}", item.Price))</td>
                        <td class="total">@(String.Format("{0:N0}", item.Price * item.Quantity))</td>
                </tr>

                num += 1;
                totalItem += item.Quantity;
                totalAmount += item.Price * item.Quantity;
            }

            numTotal = num;

            <tr>
                <td colspan="3"></td>
                <td id="totalItem">Total Item: @ViewBag.TotalItem</td>
                <td></td>
                <td id="totalAmount">Total Amount: @(String.Format("{0:N0}", ViewBag.TotalAmount))</td>
            </tr>
        }
        else
        {
            <tr>
                <td colspan="3"></td>
                <td id="totalItem">Total Item: 0</td>
                <td></td>
                <td id="totalAmount">Total Amount: 0</td>
            </tr>
        }
        </tbody>
    </table>
</div>

<div class="row">
    <div id="currentPage" class="col-xs-2 col-sm-2 col-md-2 col-lg-2">
        Page @ViewBag.Page of @ViewBag.TotalPages
    </div>
    <div id="paginationSection" class="col-xs-5 col-sm-5 col-md-5 col-lg-7 d-flex justify-content-center">
        @if (ViewBag.Page == 1)
        {
            <nav aria-label="Page Navigation Example">
                <ul class="pagination pagination-primary">
                    <li class="page-item disabled">
                        <button class="page-link previousPage"><i class="fas fa-backward"></i></button>
                    </li>
                    <li class="page-item active"> <a class="page-link">1</a></li>
                    @for (int i = 1; i < ViewBag.TotalPages; i++)
                    {
                        @if (i == 3)
                        {
                            break;
                        }
                        <li class="page-item">
                            <button class="page-link nextPage">@(ViewBag.Page + i)</button>
                        </li>

                    }
                    @if (ViewBag.TotalPages != 1)
                    {
                        <li class="page-item">
                            <button class="page-link nextPage"><i class="fas fa-forward"></i></button>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <button class="page-link nextPage"><i class="fas fa-forward"></i></button>
                        </li>
                    }

                </ul>
            </nav>
        }
        else if (ViewBag.Page == ViewBag.TotalPages)
        {
            <nav aria-label="...">
                <ul class="pagination pagination-primary">
                    <li class="page-item">
                        <button class="page-link previousPage"><i class="fas fa-backward"></i></button>
                    </li>
                    @for (int i = 2; i > 0; i--)
                    {
                        @if (ViewBag.Page - i <= 0)
                        {
                            continue;
                        }
                        <li class="page-item">
                            <button class="page-link previousPage">@(ViewBag.Page - i)</button>
                        </li>
                    }
                    <li class="page-item active"><a class="page-link">@ViewBag.Page</a></li>
                    <li class="page-item disabled">
                        <button class="page-link nextPage"><i class="fas fa-forward"></i></button>
                    </li>
                </ul>
            </nav>
        }
        else
        {
            <nav aria-label="...">
                <ul class="pagination pagination-primary">
                    <li class="page-item">
                        <button class="page-link previousPage"><i class="fas fa-backward"></i></button>
                    </li>
                    <li class="page-item">
                        <button class="page-link previousPage">@(ViewBag.Page - 1)</button>
                    </li>
                    <li class="page-item active"><a class="page-link">@ViewBag.Page</a></li>
                    <li class="page-item">
                        <button class="page-link nextPage">@(ViewBag.Page + 1)</button>
                    </li>
                    <li class="page-item">
                        <button class="page-link nextPage"><i class="fas fa-forward"></i></button>
                    </li>
                </ul>
            </nav>
        }
    </div>
    <div class="col-xs-5 col-sm-5 col-md-5 col-lg-3 d-flex justify-content-end">
        <form id="frmPageSize" method="get"
              asp-controller="Order" asp-action="CreateEdit">
            <div class="input-group">
                <span class="input-group-text">Show</span>
                <input id="pageSize" class="form-control" type="number" name="pageSize" min="1" max="100" value="@ViewBag.PageSize" />
                <span class="input-group-text"> Entries</span>
            </div>
            <input name="page" type="hidden" value="1" />
            <input name="orderId" type="hidden" value="@ViewBag.OrderId" />
        </form>

    </div>
</div>

<div class="text-center mt-5">
    <div class="btn-group" role="group">
        <button id="btnUpdateOrder" class="btn btn-success" title="Edit...">
            Save
        </button>
        <button id="btnCancelOrder" class="btn btn-secondary" title="Delete...">
            Close
        </button>
    </div>
</div>

<script>
    $(document).ready(() => {
        var totalOrderItem = parseInt("@ViewBag.TotalItem");
        var totalOrderAmount = parseFloat("@ViewBag.TotalAmount");

        var orderId = parseInt("@ViewBag.OrderId");

        var negativeDataId = -1;

        var addedItems = [];
        var deletedItems = [];
        var editedItems = [];

        let currentPage = parseInt("@ViewBag.Page");
        let pageSize = parseInt($("#pageSize").val());
        let totalPages = parseInt("@ViewBag.TotalPages");

        $("#orderDate").flatpickr({
            dateFormat: "Y-m-d"
        });

        $("#btnClearDate").click(function(e) {
            $("#orderDate").val("");
        })

        $("#btnAddItem").click(function(e) {
            pageSize = parseInt($("#pageSize").val());
            CallAjaxToNextPage(totalPages, pageSize);

            debugger;
            if (addedItems.length == 0) {
                 $("#itemData tr:last").before(`<tr><td id="newItemMarker" colspan="6" style="background-color: green;">New Item</td></tr>`)
            }
            $("#itemData tr:last").before(`<tr class="editable">` + "<td></td>" + "<td>" + `<div class="btn-group" role="group">
                            <button class="btn btn-info newData" title="Edit...">
                                <i class="far fa-save"></i>
                            </button>
                            &nbsp;
                            <button id="btnCancelItem" class="btn btn-danger" title="Delete...">
                                <i class="far fa-times-circle"></i>
                            </button>
                        </div>` +"</td>" +
            `<td class="name" contenteditable></td>` + '<td class="qty" contenteditable></td>' +
            `<td class="price" contenteditable></td>` + `<td class="total"></td>` + "</tr>")

            $("#pageSize").prop("disabled", true);

            currentPage = totalPages;
            $("#currentPage").text(`Page ${currentPage} of ${totalPages}`);
        });

        //Btn Edit
        $(document).on('click', '.btn-outline-info', function(e) {
            // $(this).siblings().hide();
            // $(this).hide();

            var td = $(this).parent().parent();

            td.siblings(".name").prop("contenteditable", true);
            td.siblings(".qty").prop("contenteditable", true);
            td.siblings(".price").prop("contenteditable", true);
            // td.siblings(".total").prop("contenteditable", true);

            totalOrderItem -= parseInt(td.siblings(".qty").text());
            totalOrderAmount -= parseFloat(td.siblings(".price").text())

            if ($(this).hasClass("newData")) {
                $(this).parent().html(
                            `<button class="btn btn-info newData" title="Edit...">
                                <i class="far fa-save"></i>
                            </button>
                            &nbsp;
                            <button id="btnCancelItem" class="btn btn-danger" title="Delete...">
                                <i class="far fa-times-circle"></i>
                            </button>`);
            }
            else {
                let dataId = $(this).data("id");
                $(this).parent().html(
                            `<button data-id="${dataId}" class="btn btn-info" title="Edit...">
                                <i class="far fa-save"></i>
                            </button>`);
            }
             
        });

        //Btn Save
        $(document).on('click', '.btn-info', function(e) {
            var td = $(this).parent().parent();

            if (td.siblings(".name").text() == null || td.siblings(".name").text() == "") {
                toastAlert("Item Name must be filled!", "info", 5000);
                return;
            }

            var price = parseFloat(td.siblings(".price").text().trim())

            td.siblings(".price").text(price.toLocaleString('id-ID', {
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0
                            }));

            var qty = parseInt(td.siblings(".qty").text().trim())

            if (isNaN(price) || isNaN(qty)) {
                toastAlert("Quantity and price field must be a valid number!", "info", 5000);
                return;
            }

            td.siblings().removeAttr("contenteditable");
            let dataId = $(this).data("id");
            td.children().empty();
            if ($(this).hasClass("newData")) {
                td.children().append(`<button data-id="${negativeDataId}" class="btn btn-outline-info" title="Edit...">
                                <i class="fas fa-edit"></i>
                            </button>
                            &nbsp;
                            <button data-id="${negativeDataId}" class="btn btn-outline-danger" title="Delete...">
                                <i class="fas fa-trash-alt"></i>
                            </button>`);               
            }
            else {                
                td.children().append(`<button data-id="${dataId}" class="btn btn-outline-info" title="Edit...">
                                <i class="fas fa-edit"></i>
                            </button>
                            &nbsp;
                            <button data-id="${dataId}" class="btn btn-outline-danger" title="Delete...">
                                <i class="fas fa-trash-alt"></i>
                            </button>`);
            }           
            
            var total = price * qty;
            td.siblings(".total").text(total.toLocaleString('id-ID', {
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0
                            }));

            // var totalItemTxt = $("#totalItem").text();

            // console.log(totalItemTxt.substring(12));

            // var totalItem = qty + parseInt(totalItemTxt.substring(12));

            totalOrderItem += qty;
            console.log("qty: " + qty);

            $("#totalItem").text(`Total Item: ${totalOrderItem}`);

            // var totalAmountTxt = $("#totalAmount").text();

            totalOrderAmount += total;
            console.log("total: " + total);

            console.log(`Total Item: ${totalOrderItem}`);
            console.log(`Total Amount: ${totalOrderAmount}`);

            // var totalAmount = total + parseInt(totalAmountTxt.substring(14));
            var amountCurr = totalOrderAmount.toLocaleString('id-ID', {
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0
                            });
            $("#totalAmount").text(`Total Amount: ${amountCurr}`);

            

            if ($(this).hasClass("newData")) {
                $("#itemData tr").slice(-2, -1).each(function() {
                    var floatPrice = $(this).find('.price').text().replace(/\./g, "");
                    let item = {
                        SoItemId: negativeDataId,
                        SoOrderId: orderId,
                        ItemName: $(this).find('.name').text().trim(),
                        Quantity: $(this).find('.qty').text(),
                        Price: parseFloat(floatPrice)
                    }
                    addedItems.push(item);
                });
                console.log(addedItems);
                negativeDataId -= 1;

                // pageSize = parseInt($("#pageSize").val());

                // if ($("#itemData tr").length > pageSize) {
                //     currentPage += 1;
                //     totalPages += 1;
                //     CallAjaxToNextPage(currentPage, pageSize, true);
                // }
            }
            else if (dataId < 0)
            {
                $("#itemData tr").slice(0, -1).each(function(i, itemOnTable) {
                    var dataIdAfter = $(this).find('[data-id]').data("id");
                    let foundInList =  false;
                    var floatPrice = $(this).find('.price').text().replace(/\./g, "");
                    if (dataId == dataIdAfter) {
                        let item = {
                            SoItemId: dataId,
                            SoOrderId: orderId,
                            ItemName: $(this).find('.name').text().trim(),
                            Quantity: $(this).find('.qty').text(),
                            Price: parseFloat(floatPrice)
                        }

                        $.each(addedItems, function(i, itemOnList)  {
                            if (itemOnList.SoItemId == dataId) {
                                itemOnList.SoItemId = dataId,
                                itemOnList.SoOrderId = orderId,
                                itemOnList.ItemName = item.ItemName;
                                itemOnList.Quantity = item.Quantity;
                                itemOnList.Price = item.Price;
                                foundInList = true;
                                return false;
                            }                          
                        });

                        if (foundInList) {
                            return false;
                        }
                    }
                });
                console.log(addedItems);
            }
            else {               
                $("#itemData tr").slice(0, -1).each(function() {
                    var dataIdAfter = $(this).find('[data-id]').data("id");
                    let foundInList =  false;
                    console.log(dataId);
                    if (dataId == dataIdAfter) {
                        var floatPrice = $(this).find('.price').text().replace(/\./g, "");
                        let item = {
                            SoItemId: dataId,
                            SoOrderId: orderId,
                            ItemName: $(this).find('.name').text().trim(),
                            Quantity: $(this).find('.qty').text(),
                            Price: parseFloat(floatPrice)
                        }

                        $.each(editedItems, function(i, itemOnList) {
                            if (itemOnList.SoItemId == dataId) {
                                itemOnList.SoItemId = dataId,
                                itemOnList.SoOrderId = orderId,
                                itemOnList.ItemName = item.ItemName;
                                itemOnList.Quantity = item.Quantity;
                                itemOnList.Price = item.Price;
                                foundInList = true;
                                return false;
                            }
                        })

                        if (!foundInList) {
                            debugger;
                            editedItems.push(item);
                        }
                        console.log(editedItems);
                        return false;
                    }
                    
                });
            }

            $("#pageSize").prop("disabled", true);
        });

        $(document).on('click', '.btn-danger', function(e) {
            $(this).parent().parent().parent().remove();

            if (addedItems.length == 0) {
                $("#newItemMarker").parent().remove();
                $("#pageSize").prop("disabled", false);
            }
        })

        $(document).on('click', '.btn-outline-danger', function(e) {
            var dataId = $(this).data("id");
            let itemGone = 0;
            let amountGone = 0;
            if (dataId < 0) {
                for (i = 0; i < addedItems.length; i++) {
                    if (addedItems[i].SoItemId == dataId) {
                        itemGone += addedItems[i].Quantity;
                        amountGone += addedItems[i].Quantity * addedItems[i].Price;
                        addedItems.splice(i, 1);
                        break;
                    }
                }
            }
            else {
                $("#itemData tr").slice(0, -1).each(function() {
                    var dataIdTable = $(this).find('[data-id]').data("id");
                    // let foundInList =  false;
                    if (dataId == dataIdTable) {
                        var floatPrice = $(this).find('.price').text().replace(/\./g, "");
                        let item = {
                            SoItemId: dataId,
                            ItemName: $(this).find('.name').text().trim(),
                            Quantity: $(this).find('.qty').text(),
                            Price: parseFloat(floatPrice)
                        }
                        itemGone += item.Quantity;
                        amountGone += item.Quantity * item.Price;
                        deletedItems.push(item);

                        for (i = 0; i < editedItems.length; i++) {
                            if (editedItems[i].SoItemId == dataId) {
                                editedItems.splice(i, 1);
                                break;
                            }
                        }
                    }
                });                
            }

            totalOrderItem -= itemGone;
            $("#totalItem").text(`Total Item: ${totalOrderItem}`);

            totalOrderAmount -= amountGone;
            var amountCurr = totalOrderAmount.toLocaleString('id-ID', {
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0
                            });
            $("#totalAmount").text(`Total Amount: ${amountCurr}`);

            $(this).parent().parent().parent().remove();
            if ($("#itemData tr").length <= 1) {
                currentPage -= 1;               
                pageSize = parseInt($("#pageSize").val());
                totalPages -= 1;
                $("#currentPage").text(`Page ${currentPage} of ${totalPages}`);
                CallAjaxToNextPage(currentPage, pageSize)
            }
            console.log(addedItems);
            console.log(editedItems);
            console.log(deletedItems);

            $("#pageSize").prop("disabled", true);

            if (addedItems.length == 0) {
                $("#newItemMarker").parent().remove();
                $("#pageSize").prop("disabled", false);
            }
        });       

        function CallAjaxToNextPage(pageTo, pageSizeCall)
        {
            let ids = [];

            $.each(deletedItems, function(i, item) {
                ids.push(item.SoItemId);
            })

            $.ajax({
                url: "/Order/GetOrderItems",
                type: "get",
                traditional: true,
                data: {
                    "orderId": orderId,
                    "page": pageTo,
                    "pageSize": pageSizeCall,
                    "exceptionIds": ids
                },
                async: false,
                success: function (response) {
                    if (response.statusCode == 200) {
                        debugger;
                        // addedItemsFromlast = false;
                        // if (totalPagesAdded && response.data.Items.length == 0) {
                        //     var itemTaken = addedItems[-1];
                        //     let totalAmountItems = itemTaken.Quantity * itemTaken.Price;
                        //     $("#itemData tr:last").before(`<tr class="editable">` + "<td></td>" + "<td>" + `<div class="btn-group" role="group">
                        //     <button data-id="${itemTaken.SoItemId}" class="btn btn-outline-info" title="Edit...">
                        //         <i class="fas fa-edit"></i>
                        //     </button>
                        //     &nbsp;
                        //     <button data-id="${itemTaken.soItemId}" class="btn btn-outline-danger" title="Delete...">
                        //         <i class="fas fa-trash-alt"></i>
                        //     </button>
                        //     </div>` +"</td>" +
                        //     `<td class="name">${itemTaken.ItemName}</td>` + `<td class="qty">${itemTaken.Quantity}</td>` +
                        //     `<td class="price">${itemTaken.Price}</td>` + `<td class="total">${totalAmountItems}</td>` + "</tr>");
                        // }

                        // var addedItemsTaken;
                        // if (currentPage == totalPages && addedItems.length > 0) {
                        //     addedItemsTaken = pageSize - response.data.Items.length; 
                        // }
                        // if (response.data.Items.length + addedItems > pageSize && currentPage == totalPages) {
                        //     addedItemsFromlast = true;
                        //     $.each(addedItems.reverse(), function(i, item) {
                        //         if (i < pageSize) {

                        //         }
                        //     });
                        // }
                        $("#itemData tr:not(:last)").remove();
                        var counter = 1;
                        $.each(response.data.items, function(i, item) {
                            if (editedItems.length > 0) {
                                $.each(editedItems, function(i, itemEdited) {
                                    if (itemEdited.SoItemId == item.soItemId) {
                                        item.itemName = itemEdited.ItemName;
                                        item.quantity = itemEdited.Quantity;
                                        item.price = itemEdited.Price;
                                        return false;
                                    }                                  
                                })
                            }

                            let totalAmountItems = item.quantity * item.price;
                            var priceCurr = item.price.toLocaleString('id-ID', {
                                                minimumFractionDigits: 0,
                                                maximumFractionDigits: 0
                                            });
                            var amountCurr = totalAmountItems.toLocaleString('id-ID', {
                                                minimumFractionDigits: 0,
                                                maximumFractionDigits: 0
                                            });

                            console.log(item.soItemId);
                            $("#itemData tr:last").before(`<tr class="editable">` + `<td>${counter}</td>` + "<td>" + `<div class="btn-group" role="group">
                            <button data-id="${item.soItemId}" class="btn btn-outline-info" title="Edit...">
                                <i class="fas fa-edit"></i>
                            </button>
                            &nbsp;
                            <button data-id="${item.soItemId}" class="btn btn-outline-danger" title="Delete...">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                            </div>` +"</td>" +
                            `<td class="name">${item.itemName}</td>` + `<td class="qty">${item.quantity}</td>` +
                            `<td class="price">${priceCurr}</td>` + `<td class="total">${amountCurr}</td>` + "</tr>")

                            counter += 1;
                        });

                        if (pageTo == totalPages && addedItems.length > 0) {
                            $("#itemData tr:last").before(`<tr><td colspan="6" style="background-color: green;">New Item</td></tr>`)
                            for (i = 0; i < addedItems.length; i++) {
                                var itemTaken = addedItems[i];
                                let totalAmountItems = itemTaken.Quantity * itemTaken.Price;
                                priceCurr = itemTaken.Price.toLocaleString('id-ID', {
                                                minimumFractionDigits: 0,
                                                maximumFractionDigits: 0
                                            });
                                amountCurr = totalAmountItems.toLocaleString('id-ID', {
                                                minimumFractionDigits: 0,
                                                maximumFractionDigits: 0
                                            });
                                $("#itemData tr:last").before(`<tr class="editable">` + "<td></td>" + "<td>" + `<div class="btn-group" role="group">
                                <button data-id="${itemTaken.SoItemId}" class="btn btn-outline-info" title="Edit...">
                                    <i class="fas fa-edit"></i>
                                </button>
                                &nbsp;
                                <button data-id="${itemTaken.soItemId}" class="btn btn-outline-danger" title="Delete...">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                                </div>` +"</td>" +
                                `<td class="name">${itemTaken.ItemName}</td>` + `<td class="qty">${itemTaken.Quantity}</td>` +
                                `<td class="price">${priceCurr}</td>` + `<td class="total">${amountCurr}</td>` + "</tr>");
                            }
                        }

                        // for (i = 0; i < addedItemsTaken; i++) {
                        //     var itemTaken = addedItems[i];
                        //     let totalAmountItems = itemTaken.Quantity * itemTaken.Price;
                        //     $("#itemData tr:last").before(`<tr class="editable">` + "<td></td>" + "<td>" + `<div class="btn-group" role="group">
                        //     <button data-id="${itemTaken.SoItemId}" class="btn btn-outline-info" title="Edit...">
                        //         <i class="fas fa-edit"></i>
                        //     </button>
                        //     &nbsp;
                        //     <button data-id="${itemTaken.soItemId}" class="btn btn-outline-danger" title="Delete...">
                        //         <i class="fas fa-trash-alt"></i>
                        //     </button>
                        //     </div>` +"</td>" +
                        //     `<td class="name">${itemTaken.ItemName}</td>` + `<td class="qty">${itemTaken.Quantity}</td>` +
                        //     `<td class="price">${itemTaken.Price}</td>` + `<td class="total">${totalAmountItems}</td>` + "</tr>");
                        // }

                        // if (addedItemsTaken != addedItems.length) {
                        //     totalPages += 1;
                        // }

                        //$("#paginationSection").empty();

                        // currentPage -= 1

                        if (pageTo == 1) {
                            var theHtml = ``

                            for (i = 1; i < totalPages; i++)
                            {
                                if (i == 3)
                                {
                                    break;
                                }
                                let nextPage = pageTo + i;
                                theHtml = theHtml + `<li class="page-item">
                                    <button class="page-link nextPage">${nextPage}</button>
                                </li>`;
                            }

                            var theHtml2 = ``;

                            if (totalPages != 1)
                            {
                                theHtml2 = theHtml2 + `<li class="page-item"><button class="page-link nextPage"><i class="fas fa-forward"></i></button></li>`;
                            }
                            else
                            {
                                theHtml2 = theHtml2 +`<li class="page-item disabled"><button class="page-link nextPage"><i class="fas fa-forward"></i></button></li>`
                            }

                            $("#paginationSection").html(
                                ` <nav aria-label="Page Navigation Example">
                                    <ul class="pagination pagination-primary">
                                        <li class="page-item disabled">
                                            <button class="page-link previousPage"><i class="fas fa-backward"></i></button>
                                        </li>
                                        <li class="page-item active"> <a class="page-link">1</a></li>` + theHtml + theHtml2
                            );
                        }
                        else if (pageTo == totalPages) {
                            var theHtml = ``

                            for (i = 2; i > 0; i--)
                            {
                                if (pageTo - i <= 0)
                                {
                                    continue;
                                }
                                let prevPage = pageTo - i;
                                theHtml = theHtml + `<li class="page-item">
                                    <button class="page-link previousPage">${prevPage}</button>
                                </li>`;
                            }

                            $("#paginationSection").html(
                                ` <nav aria-label="...">
                                    <ul class="pagination pagination-primary">
                                        <li class="page-item">
                                            <button class="page-link previousPage"><i class="fas fa-backward"></i></button>
                                        </li>` + theHtml +
                                `<li class="page-item active"><a class="page-link">${pageTo}</a></li>
                                        <li class="page-item disabled">
                                            <button class="page-link nextPage"><i class="fas fa-forward"></i></button>
                                        </li>
                                    </ul>
                                </nav>`
                            );
                        }
                        else {
                            let prevPage = pageTo - 1;
                            let nextPage = pageTo + 1;

                            $("#paginationSection").html(`<nav aria-label="...">
                                <ul class="pagination pagination-primary">
                                    <li class="page-item">
                                        <button class="page-link previousPage"><i class="fas fa-backward"></i></button>
                                    </li>
                                    <li class="page-item">
                                        <button class="page-link previousPage">${prevPage}</button>
                                    </li>
                                    <li class="page-item active"><a class="page-link">${pageTo}</a></li>
                                    <li class="page-item">
                                        <button class="page-link nextPage">${nextPage}</button>
                                    </li>
                                    <li class="page-item">
                                        <button class="page-link nextPage"><i class="fas fa-forward"></i></button>
                                    </li>
                                </ul>
                            </nav>`)
                        }
                    }
                },
                error: function (jqXHR, exception)  {
                    if (jqXHR.status === 0) {
                        toastAlert('Not connect.\n Verify Network.', "error", 10000);
                    } else if (jqXHR.status == 404) {
                        toastAlert('Requested page not found. [404]', "error", 10000);
                    } else if (jqXHR.status == 500) {
                        toastAlert('Internal Server Error [500].', "error", 10000);
                    } else if (exception === 'parsererror') {
                        toastAlert('Requested JSON parse failed.', "error", 10000);
                    } else if (exception === 'timeout') {
                        toastAlert('Time out error.', "error", 10000);
                    } else if (exception === 'abort') {
                        toastAlert('Ajax request aborted.', "error", 10000);
                    } else {
                        toastAlert('Uncaught Error.\n' + jqXHR.responseText, "error", 10000);
                    }
                }
            });
        }

        $(document).on('click', '.nextPage', function(e) {
            pageSize = parseInt($("#pageSize").val());
            CallAjaxToNextPage(currentPage + 1, pageSize);
            currentPage += 1;
            $("#currentPage").text(`Page ${currentPage} of ${totalPages}`);
        });

        $(document).on('click', '.previousPage', function(e) {
            debugger;
            pageSize = parseInt($("#pageSize").val());
            CallAjaxToNextPage(currentPage - 1, pageSize);
            currentPage -= 1;          
            $("#currentPage").text(`Page ${currentPage} of ${totalPages}`);
        });

        $("#frmOrder").submit(function(e) {
            e.preventDefault();
        })

        $("#frmOrder").validate({
            rules: {
                OrderNo: {
                    required: true
                },
                OrderDate: {
                    required: true
                },
                ComCustomerId: {
                    required: true
                },
                Address: {
                    required: true
                }
            },
            messages: {
                OrderNo: {
                    required: "Order Number Is Required"
                },
                OrderDate: {
                    required: "Order Date Is Required"
                },
                Address: {
                    required: "Address Is Required"
                }
            },
            errorPlacement: function (error, element) {
                var message = error.text();

                if (message == "Order Number Is Required")
                {
                    error.appendTo("#orderNoErr");
                }
                else if (message == "Order Date Is Required")
                {
                    error.appendTo("#orderDateErr");
                }
                else if (message == "Address Is Required")
                {
                    error.appendTo("#orderAddressErr");
                }
            }
        });

        $("#btnUpdateOrder").click(function(e) {
            if ($("#frmOrder").valid()) {
                var finalUpdatedItems = addedItems.concat(editedItems);
                finalUpdatedItems = finalUpdatedItems.concat(deletedItems);

                $("#itemCarry").val(JSON.stringify(finalUpdatedItems));

                var order = $("#frmOrder").serializeArray();
                var orderObject = {};

                $.each(order, function(i, field) {
                    orderObject[field.name] = field.value;
                });

                orderObject.Items = JSON.parse(orderObject.Items);

                console.log(JSON.stringify(orderObject));

                $.ajax({
                    url:"/Order/UpdateOrder",
                    type: "post",
                    contentType: 'application/json',
                    data: JSON.stringify(orderObject),
                    success: function (response) {
                        if (response.statusCode == 200 || response.statusCode == 201) {
                            location.href = "/Order";
                        }
                        else {
                            toastAlert(response.message, "error", 10000)
                        }
                        console.log(response);
                    },
                    error: function (jqXHR, exception)  {
                        if (jqXHR.status === 0) {
                            toastAlert('Not connect.\n Verify Network.', "error", 10000);
                        } else if (jqXHR.status == 404) {
                            toastAlert('Requested page not found. [404]', "error", 10000);
                        } else if (jqXHR.status == 500) {
                            toastAlert('Internal Server Error [500].', "error", 10000);
                        } else if (exception === 'parsererror') {
                            toastAlert('Requested JSON parse failed.', "error", 10000);
                        } else if (exception === 'timeout') {
                            toastAlert('Time out error.', "error", 10000);
                        } else if (exception === 'abort') {
                            toastAlert('Ajax request aborted.', "error", 10000);
                        } else {
                            toastAlert('Uncaught Error.\n' + jqXHR.responseText, "error", 10000);
                        }
                    }
                })
            }
        })

        $("#btnCancelOrder").click(function() {
            location.href = "/Order";
        })
    })
</script>